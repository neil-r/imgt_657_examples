import hashlib

'''
Generated by ChatGPT.

Please note that this implementation is for demonstration purposes only and may
not be as robust as dedicated hash functions. In practice, using a well-tested
hashing library like pyhash is recommended for a real Bloom filter
implementation.
'''


def hash_f(item, seed) -> int:
    return int(hashlib.sha256(f"{item}{seed}".encode('utf-8')).hexdigest(), 16)


class BloomFilter:
    def __init__(self, size, num_hash_functions, hash_f=hash_f):
        self.size = size
        self.num_hash_functions = num_hash_functions
        self.bit_array = [False] * size
        self.hash_f = hash_f

    def add(self, item):
        for seed in range(self.num_hash_functions):
            index = self.hash_f(item, seed) % self.size
            self.bit_array[index] = True

    def __contains__(self, item):
        for seed in range(self.num_hash_functions):
            index = self.hash_f(item, seed) % self.size
            if not self.bit_array[index]:
                return False
        return True


if __name__ == "__main__":
    # Example usage:
    bloom_filter = BloomFilter(size=10, num_hash_functions=3)

    # Add elements to the filter
    bloom_filter.add("apple")
    bloom_filter.add("banana")
    bloom_filter.add("orange")

    # Check for membership
    print("apple" in bloom_filter)    # True
    print("grape" in bloom_filter)    # False (might be True, a false positive)

    print(f"Bit Array: {bloom_filter.bit_array}")
